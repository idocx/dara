Traceback (most recent call last):
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from dara.structure_db import CODDatabase

# The COD database contains methods to filter phases in the chemical system
cod_database = CODDatabase()

# gather reference phases and save them to a directory called "cifs"
all_icsd_ids = cod_database.get_cifs_by_chemsys(chemical_system, dest_dir="cifs")
------------------

----- stdout -----
2025-10-01 17:33:31,584 WARNING dara.structure_db Local copy of database not found. Attempting to download structures...
----- stdout -----
Failed to download 1007256: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1541503: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1529590: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1011223: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1541798: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1536063: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 9007435: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1537396: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 9015579: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 9006858: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1527883: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 9004178: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1512527: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 9007477: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 2310614: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 2106431: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
----- stdout -----
Failed to download 2104024: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1549040: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1549041: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1528389: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1528620: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 9013109: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1534836: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 2106196: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1526227: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 2106877: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 9009215: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1525835: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 9017498: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1533322: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 9012435: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 4517837: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 2300365: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1537875: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 9011647: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 9014631: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 7101738: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 4030923: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1528336: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 8000212: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 9011050: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1525833: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
Failed to download 1538108: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)
------------------

[31m---------------------------------------------------------------------------[39m
[31mTimeoutError[39m                              Traceback (most recent call last)
[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/urllib3/connectionpool.py:464[39m, in [36mHTTPConnectionPool._make_request[39m[34m(self, conn, method, url, body, headers, retries, timeout, chunked, response_conn, preload_content, decode_content, enforce_content_length)[39m
[32m    463[39m [38;5;28;01mtry[39;00m:
[32m--> [39m[32m464[39m     [38;5;28;43mself[39;49m[43m.[49m[43m_validate_conn[49m[43m([49m[43mconn[49m[43m)[49m
[32m    465[39m [38;5;28;01mexcept[39;00m (SocketTimeout, BaseSSLError) [38;5;28;01mas[39;00m e:

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/urllib3/connectionpool.py:1093[39m, in [36mHTTPSConnectionPool._validate_conn[39m[34m(self, conn)[39m
[32m   1092[39m [38;5;28;01mif[39;00m conn.is_closed:
[32m-> [39m[32m1093[39m     [43mconn[49m[43m.[49m[43mconnect[49m[43m([49m[43m)[49m
[32m   1095[39m [38;5;66;03m# TODO revise this, see https://github.com/urllib3/urllib3/issues/2791[39;00m

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/urllib3/connection.py:790[39m, in [36mHTTPSConnection.connect[39m[34m(self)[39m
[32m    788[39m server_hostname_rm_dot = server_hostname.rstrip([33m"[39m[33m.[39m[33m"[39m)
[32m--> [39m[32m790[39m sock_and_verified = [43m_ssl_wrap_socket_and_match_hostname[49m[43m([49m
[32m    791[39m [43m    [49m[43msock[49m[43m=[49m[43msock[49m[43m,[49m
[32m    792[39m [43m    [49m[43mcert_reqs[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mcert_reqs[49m[43m,[49m
[32m    793[39m [43m    [49m[43mssl_version[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mssl_version[49m[43m,[49m
[32m    794[39m [43m    [49m[43mssl_minimum_version[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mssl_minimum_version[49m[43m,[49m
[32m    795[39m [43m    [49m[43mssl_maximum_version[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mssl_maximum_version[49m[43m,[49m
[32m    796[39m [43m    [49m[43mca_certs[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mca_certs[49m[43m,[49m
[32m    797[39m [43m    [49m[43mca_cert_dir[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mca_cert_dir[49m[43m,[49m
[32m    798[39m [43m    [49m[43mca_cert_data[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mca_cert_data[49m[43m,[49m
[32m    799[39m [43m    [49m[43mcert_file[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mcert_file[49m[43m,[49m
[32m    800[39m [43m    [49m[43mkey_file[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mkey_file[49m[43m,[49m
[32m    801[39m [43m    [49m[43mkey_password[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mkey_password[49m[43m,[49m
[32m    802[39m [43m    [49m[43mserver_hostname[49m[43m=[49m[43mserver_hostname_rm_dot[49m[43m,[49m
[32m    803[39m [43m    [49m[43mssl_context[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mssl_context[49m[43m,[49m
[32m    804[39m [43m    [49m[43mtls_in_tls[49m[43m=[49m[43mtls_in_tls[49m[43m,[49m
[32m    805[39m [43m    [49m[43massert_hostname[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43massert_hostname[49m[43m,[49m
[32m    806[39m [43m    [49m[43massert_fingerprint[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43massert_fingerprint[49m[43m,[49m
[32m    807[39m [43m[49m[43m)[49m
[32m    808[39m [38;5;28mself[39m.sock = sock_and_verified.socket

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/urllib3/connection.py:969[39m, in [36m_ssl_wrap_socket_and_match_hostname[39m[34m(sock, cert_reqs, ssl_version, ssl_minimum_version, ssl_maximum_version, cert_file, key_file, key_password, ca_certs, ca_cert_dir, ca_cert_data, assert_hostname, assert_fingerprint, server_hostname, ssl_context, tls_in_tls)[39m
[32m    967[39m         server_hostname = normalized
[32m--> [39m[32m969[39m ssl_sock = [43mssl_wrap_socket[49m[43m([49m
[32m    970[39m [43m    [49m[43msock[49m[43m=[49m[43msock[49m[43m,[49m
[32m    971[39m [43m    [49m[43mkeyfile[49m[43m=[49m[43mkey_file[49m[43m,[49m
[32m    972[39m [43m    [49m[43mcertfile[49m[43m=[49m[43mcert_file[49m[43m,[49m
[32m    973[39m [43m    [49m[43mkey_password[49m[43m=[49m[43mkey_password[49m[43m,[49m
[32m    974[39m [43m    [49m[43mca_certs[49m[43m=[49m[43mca_certs[49m[43m,[49m
[32m    975[39m [43m    [49m[43mca_cert_dir[49m[43m=[49m[43mca_cert_dir[49m[43m,[49m
[32m    976[39m [43m    [49m[43mca_cert_data[49m[43m=[49m[43mca_cert_data[49m[43m,[49m
[32m    977[39m [43m    [49m[43mserver_hostname[49m[43m=[49m[43mserver_hostname[49m[43m,[49m
[32m    978[39m [43m    [49m[43mssl_context[49m[43m=[49m[43mcontext[49m[43m,[49m
[32m    979[39m [43m    [49m[43mtls_in_tls[49m[43m=[49m[43mtls_in_tls[49m[43m,[49m
[32m    980[39m [43m[49m[43m)[49m
[32m    982[39m [38;5;28;01mtry[39;00m:

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/urllib3/util/ssl_.py:480[39m, in [36mssl_wrap_socket[39m[34m(sock, keyfile, certfile, cert_reqs, ca_certs, server_hostname, ssl_version, ciphers, ssl_context, ca_cert_dir, key_password, ca_cert_data, tls_in_tls)[39m
[32m    478[39m context.set_alpn_protocols(ALPN_PROTOCOLS)
[32m--> [39m[32m480[39m ssl_sock = [43m_ssl_wrap_socket_impl[49m[43m([49m[43msock[49m[43m,[49m[43m [49m[43mcontext[49m[43m,[49m[43m [49m[43mtls_in_tls[49m[43m,[49m[43m [49m[43mserver_hostname[49m[43m)[49m
[32m    481[39m [38;5;28;01mreturn[39;00m ssl_sock

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/urllib3/util/ssl_.py:524[39m, in [36m_ssl_wrap_socket_impl[39m[34m(sock, ssl_context, tls_in_tls, server_hostname)[39m
[32m    522[39m     [38;5;28;01mreturn[39;00m SSLTransport(sock, ssl_context, server_hostname)
[32m--> [39m[32m524[39m [38;5;28;01mreturn[39;00m [43mssl_context[49m[43m.[49m[43mwrap_socket[49m[43m([49m[43msock[49m[43m,[49m[43m [49m[43mserver_hostname[49m[43m=[49m[43mserver_hostname[49m[43m)[49m

[36mFile [39m[32m/usr/lib/python3.12/ssl.py:455[39m, in [36mSSLContext.wrap_socket[39m[34m(self, sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname, session)[39m
[32m    449[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mwrap_socket[39m([38;5;28mself[39m, sock, server_side=[38;5;28;01mFalse[39;00m,
[32m    450[39m                 do_handshake_on_connect=[38;5;28;01mTrue[39;00m,
[32m    451[39m                 suppress_ragged_eofs=[38;5;28;01mTrue[39;00m,
[32m    452[39m                 server_hostname=[38;5;28;01mNone[39;00m, session=[38;5;28;01mNone[39;00m):
[32m    453[39m     [38;5;66;03m# SSLSocket class handles server_hostname encoding before it calls[39;00m
[32m    454[39m     [38;5;66;03m# ctx._wrap_socket()[39;00m
[32m--> [39m[32m455[39m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43msslsocket_class[49m[43m.[49m[43m_create[49m[43m([49m
[32m    456[39m [43m        [49m[43msock[49m[43m=[49m[43msock[49m[43m,[49m
[32m    457[39m [43m        [49m[43mserver_side[49m[43m=[49m[43mserver_side[49m[43m,[49m
[32m    458[39m [43m        [49m[43mdo_handshake_on_connect[49m[43m=[49m[43mdo_handshake_on_connect[49m[43m,[49m
[32m    459[39m [43m        [49m[43msuppress_ragged_eofs[49m[43m=[49m[43msuppress_ragged_eofs[49m[43m,[49m
[32m    460[39m [43m        [49m[43mserver_hostname[49m[43m=[49m[43mserver_hostname[49m[43m,[49m
[32m    461[39m [43m        [49m[43mcontext[49m[43m=[49m[38;5;28;43mself[39;49m[43m,[49m
[32m    462[39m [43m        [49m[43msession[49m[43m=[49m[43msession[49m
[32m    463[39m [43m    [49m[43m)[49m

[36mFile [39m[32m/usr/lib/python3.12/ssl.py:1042[39m, in [36mSSLSocket._create[39m[34m(cls, sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname, context, session)[39m
[32m   1041[39m                 [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([33m"[39m[33mdo_handshake_on_connect should not be specified for non-blocking sockets[39m[33m"[39m)
[32m-> [39m[32m1042[39m             [38;5;28;43mself[39;49m[43m.[49m[43mdo_handshake[49m[43m([49m[43m)[49m
[32m   1043[39m [38;5;28;01mexcept[39;00m:

[36mFile [39m[32m/usr/lib/python3.12/ssl.py:1320[39m, in [36mSSLSocket.do_handshake[39m[34m(self, block)[39m
[32m   1319[39m         [38;5;28mself[39m.settimeout([38;5;28;01mNone[39;00m)
[32m-> [39m[32m1320[39m     [38;5;28;43mself[39;49m[43m.[49m[43m_sslobj[49m[43m.[49m[43mdo_handshake[49m[43m([49m[43m)[49m
[32m   1321[39m [38;5;28;01mfinally[39;00m:

[31mTimeoutError[39m: _ssl.c:983: The handshake operation timed out

The above exception was the direct cause of the following exception:

[31mReadTimeoutError[39m                          Traceback (most recent call last)
[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/requests/adapters.py:644[39m, in [36mHTTPAdapter.send[39m[34m(self, request, stream, timeout, verify, cert, proxies)[39m
[32m    643[39m [38;5;28;01mtry[39;00m:
[32m--> [39m[32m644[39m     resp = [43mconn[49m[43m.[49m[43murlopen[49m[43m([49m
[32m    645[39m [43m        [49m[43mmethod[49m[43m=[49m[43mrequest[49m[43m.[49m[43mmethod[49m[43m,[49m
[32m    646[39m [43m        [49m[43murl[49m[43m=[49m[43murl[49m[43m,[49m
[32m    647[39m [43m        [49m[43mbody[49m[43m=[49m[43mrequest[49m[43m.[49m[43mbody[49m[43m,[49m
[32m    648[39m [43m        [49m[43mheaders[49m[43m=[49m[43mrequest[49m[43m.[49m[43mheaders[49m[43m,[49m
[32m    649[39m [43m        [49m[43mredirect[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[32m    650[39m [43m        [49m[43massert_same_host[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[32m    651[39m [43m        [49m[43mpreload_content[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[32m    652[39m [43m        [49m[43mdecode_content[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[32m    653[39m [43m        [49m[43mretries[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mmax_retries[49m[43m,[49m
[32m    654[39m [43m        [49m[43mtimeout[49m[43m=[49m[43mtimeout[49m[43m,[49m
[32m    655[39m [43m        [49m[43mchunked[49m[43m=[49m[43mchunked[49m[43m,[49m
[32m    656[39m [43m    [49m[43m)[49m
[32m    658[39m [38;5;28;01mexcept[39;00m (ProtocolError, [38;5;167;01mOSError[39;00m) [38;5;28;01mas[39;00m err:

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/urllib3/connectionpool.py:841[39m, in [36mHTTPConnectionPool.urlopen[39m[34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, preload_content, decode_content, **response_kw)[39m
[32m    839[39m     new_e = ProtocolError([33m"[39m[33mConnection aborted.[39m[33m"[39m, new_e)
[32m--> [39m[32m841[39m retries = [43mretries[49m[43m.[49m[43mincrement[49m[43m([49m
[32m    842[39m [43m    [49m[43mmethod[49m[43m,[49m[43m [49m[43murl[49m[43m,[49m[43m [49m[43merror[49m[43m=[49m[43mnew_e[49m[43m,[49m[43m [49m[43m_pool[49m[43m=[49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43m_stacktrace[49m[43m=[49m[43msys[49m[43m.[49m[43mexc_info[49m[43m([49m[43m)[49m[43m[[49m[32;43m2[39;49m[43m][49m
[32m    843[39m [43m[49m[43m)[49m
[32m    844[39m retries.sleep()

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/urllib3/util/retry.py:474[39m, in [36mRetry.increment[39m[34m(self, method, url, response, error, _pool, _stacktrace)[39m
[32m    473[39m [38;5;28;01mif[39;00m read [38;5;129;01mis[39;00m [38;5;28;01mFalse[39;00m [38;5;129;01mor[39;00m method [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mor[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m._is_method_retryable(method):
[32m--> [39m[32m474[39m     [38;5;28;01mraise[39;00m [43mreraise[49m[43m([49m[38;5;28;43mtype[39;49m[43m([49m[43merror[49m[43m)[49m[43m,[49m[43m [49m[43merror[49m[43m,[49m[43m [49m[43m_stacktrace[49m[43m)[49m
[32m    475[39m [38;5;28;01melif[39;00m read [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/urllib3/util/util.py:39[39m, in [36mreraise[39m[34m(tp, value, tb)[39m
[32m     38[39m         [38;5;28;01mraise[39;00m value.with_traceback(tb)
[32m---> [39m[32m39[39m     [38;5;28;01mraise[39;00m value
[32m     40[39m [38;5;28;01mfinally[39;00m:

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/urllib3/connectionpool.py:787[39m, in [36mHTTPConnectionPool.urlopen[39m[34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, preload_content, decode_content, **response_kw)[39m
[32m    786[39m [38;5;66;03m# Make the request on the HTTPConnection object[39;00m
[32m--> [39m[32m787[39m response = [38;5;28;43mself[39;49m[43m.[49m[43m_make_request[49m[43m([49m
[32m    788[39m [43m    [49m[43mconn[49m[43m,[49m
[32m    789[39m [43m    [49m[43mmethod[49m[43m,[49m
[32m    790[39m [43m    [49m[43murl[49m[43m,[49m
[32m    791[39m [43m    [49m[43mtimeout[49m[43m=[49m[43mtimeout_obj[49m[43m,[49m
[32m    792[39m [43m    [49m[43mbody[49m[43m=[49m[43mbody[49m[43m,[49m
[32m    793[39m [43m    [49m[43mheaders[49m[43m=[49m[43mheaders[49m[43m,[49m
[32m    794[39m [43m    [49m[43mchunked[49m[43m=[49m[43mchunked[49m[43m,[49m
[32m    795[39m [43m    [49m[43mretries[49m[43m=[49m[43mretries[49m[43m,[49m
[32m    796[39m [43m    [49m[43mresponse_conn[49m[43m=[49m[43mresponse_conn[49m[43m,[49m
[32m    797[39m [43m    [49m[43mpreload_content[49m[43m=[49m[43mpreload_content[49m[43m,[49m
[32m    798[39m [43m    [49m[43mdecode_content[49m[43m=[49m[43mdecode_content[49m[43m,[49m
[32m    799[39m [43m    [49m[43m*[49m[43m*[49m[43mresponse_kw[49m[43m,[49m
[32m    800[39m [43m[49m[43m)[49m
[32m    802[39m [38;5;66;03m# Everything went great![39;00m

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/urllib3/connectionpool.py:488[39m, in [36mHTTPConnectionPool._make_request[39m[34m(self, conn, method, url, body, headers, retries, timeout, chunked, response_conn, preload_content, decode_content, enforce_content_length)[39m
[32m    487[39m         new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)
[32m--> [39m[32m488[39m     [38;5;28;01mraise[39;00m new_e
[32m    490[39m [38;5;66;03m# conn.request() calls http.client.*.request, not the method in[39;00m
[32m    491[39m [38;5;66;03m# urllib3.request. It also calls makefile (recv) on the socket.[39;00m

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/urllib3/connectionpool.py:466[39m, in [36mHTTPConnectionPool._make_request[39m[34m(self, conn, method, url, body, headers, retries, timeout, chunked, response_conn, preload_content, decode_content, enforce_content_length)[39m
[32m    465[39m [38;5;28;01mexcept[39;00m (SocketTimeout, BaseSSLError) [38;5;28;01mas[39;00m e:
[32m--> [39m[32m466[39m     [38;5;28;43mself[39;49m[43m.[49m[43m_raise_timeout[49m[43m([49m[43merr[49m[43m=[49m[43me[49m[43m,[49m[43m [49m[43murl[49m[43m=[49m[43murl[49m[43m,[49m[43m [49m[43mtimeout_value[49m[43m=[49m[43mconn[49m[43m.[49m[43mtimeout[49m[43m)[49m
[32m    467[39m     [38;5;28;01mraise[39;00m

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/urllib3/connectionpool.py:367[39m, in [36mHTTPConnectionPool._raise_timeout[39m[34m(self, err, url, timeout_value)[39m
[32m    366[39m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(err, SocketTimeout):
[32m--> [39m[32m367[39m     [38;5;28;01mraise[39;00m ReadTimeoutError(
[32m    368[39m         [38;5;28mself[39m, url, [33mf[39m[33m"[39m[33mRead timed out. (read timeout=[39m[38;5;132;01m{[39;00mtimeout_value[38;5;132;01m}[39;00m[33m)[39m[33m"[39m
[32m    369[39m     ) [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01merr[39;00m
[32m    371[39m [38;5;66;03m# See the above comment about EAGAIN in Python 3.[39;00m

[31mReadTimeoutError[39m: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)

During handling of the above exception, another exception occurred:

[31mReadTimeout[39m                               Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[4][39m[32m, line 7[39m
[32m      4[39m cod_database = CODDatabase()
[32m      6[39m [38;5;66;03m# gather reference phases and save them to a directory called "cifs"[39;00m
[32m----> [39m[32m7[39m all_icsd_ids = [43mcod_database[49m[43m.[49m[43mget_cifs_by_chemsys[49m[43m([49m[43mchemical_system[49m[43m,[49m[43m [49m[43mdest_dir[49m[43m=[49m[33;43m"[39;49m[33;43mcifs[39;49m[33;43m"[39;49m[43m)[49m

[36mFile [39m[32m~/work/dara/dara/src/dara/structure_db.py:107[39m, in [36mStructureDatabase.get_cifs_by_chemsys[39m[34m(self, chemsys, e_hull_filter, copy_files, dest_dir, exclude_gases)[39m
[32m    104[39m         [38;5;28;01mif[39;00m sub_chemsys [38;5;129;01min[39;00m [38;5;28mself[39m.preparsed_info:
[32m    105[39m             all_data.extend([38;5;28mself[39m.preparsed_info[sub_chemsys])
[32m--> [39m[32m107[39m file_map = [38;5;28;43mself[39;49m[43m.[49m[43m_generate_file_map[49m[43m([49m[43mall_data[49m[43m,[49m[43m [49m[43me_hull_filter[49m[43m,[49m[43m [49m[43mexclude_gases[49m[43m)[49m
[32m    109[39m [38;5;28;01mif[39;00m copy_files:
[32m    110[39m     copy_and_rename_files(file_map, dest_dir)

[36mFile [39m[32m~/work/dara/dara/src/dara/structure_db.py:148[39m, in [36mStructureDatabase._generate_file_map[39m[34m(self, all_data, e_hull_filter, exclude_gases, download_folder)[39m
[32m    144[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m.local_copy_found:
[32m    145[39m     logger.warning(
[32m    146[39m         [33m"[39m[33mLocal copy of database not found. Attempting to download structures...[39m[33m"[39m
[32m    147[39m     )
[32m--> [39m[32m148[39m     _ = [38;5;28;43mself[39;49m[43m.[49m[43mdownload_structures[49m[43m([49m
[32m    149[39m [43m        [49m[43m[[49m[43mdata[49m[43m[[49m[32;43m1[39;49m[43m][49m[43m [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mdata[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mall_data[49m[43m][49m[43m,[49m
[32m    150[39m [43m        [49m[43msave[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m
[32m    151[39m [43m        [49m[43mdefault_folder[49m[43m=[49m[43mdownload_folder[49m[43m,[49m
[32m    152[39m [43m    [49m[43m)[49m
[32m    154[39m file_map = {}
[32m    155[39m [38;5;28;01mfor[39;00m formula, code, sg, e_hull [38;5;129;01min[39;00m all_data:

[36mFile [39m[32m~/work/dara/dara/src/dara/structure_db.py:259[39m, in [36mCODDatabase.download_structures[39m[34m(self, ids, save, default_folder)[39m
[32m    247[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mdownload_structures[39m(
[32m    248[39m     [38;5;28mself[39m,
[32m    249[39m     ids: [38;5;28mlist[39m[[38;5;28mstr[39m] | [38;5;28;01mNone[39;00m = [38;5;28;01mNone[39;00m,
[32m    250[39m     save=[38;5;28;01mFalse[39;00m,
[32m    251[39m     default_folder=[33m"[39m[33mdownloaded_cod_cifs[39m[33m"[39m,
[32m    252[39m ) -> [38;5;28mlist[39m[Cif]:
[32m    253[39m [38;5;250m    [39m[33;03m"""Download structures from the COD database. Note that this downloads directly[39;00m
[32m    254[39m [33;03m    from the COD website, so it may be slow. Please do not abuse this feature.[39;00m
[32m    255[39m 
[32m    256[39m [33;03m    Args:[39;00m
[32m    257[39m [33;03m        ids: List of COD IDs to download.[39;00m
[32m    258[39m [33;03m    """[39;00m
[32m--> [39m[32m259[39m     cifs = [43mthread_map[49m[43m([49m
[32m    260[39m [43m        [49m[38;5;28;43mself[39;49m[43m.[49m[43m_download_cod[49m[43m,[49m
[32m    261[39m [43m        [49m[43mids[49m[43m,[49m
[32m    262[39m [43m        [49m[43mchunksize[49m[43m=[49m[32;43m1[39;49m[43m,[49m
[32m    263[39m [43m        [49m[43mmax_workers[49m[43m=[49m[32;43m128[39;49m[43m,[49m
[32m    264[39m [43m        [49m[43mdesc[49m[43m=[49m[33;43m"[39;49m[33;43mDownloading CIFs from COD...[39;49m[33;43m"[39;49m[43m,[49m
[32m    265[39m [43m    [49m[43m)[49m
[32m    266[39m     [38;5;28;01mif[39;00m save:
[32m    267[39m         logger.info([33mf[39m[33m"[39m[33mSaving downloaded CIFs to [39m[38;5;132;01m{[39;00mdefault_folder[38;5;132;01m}[39;00m[33m"[39m)

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/tqdm/contrib/concurrent.py:69[39m, in [36mthread_map[39m[34m(fn, *iterables, **tqdm_kwargs)[39m
[32m     55[39m [38;5;250m[39m[33;03m"""[39;00m
[32m     56[39m [33;03mEquivalent of `list(map(fn, *iterables))`[39;00m
[32m     57[39m [33;03mdriven by `concurrent.futures.ThreadPoolExecutor`.[39;00m
[32m   (...)[39m[32m     66[39m [33;03m    [default: max(32, cpu_count() + 4)].[39;00m
[32m     67[39m [33;03m"""[39;00m
[32m     68[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mconcurrent[39;00m[34;01m.[39;00m[34;01mfutures[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m ThreadPoolExecutor
[32m---> [39m[32m69[39m [38;5;28;01mreturn[39;00m [43m_executor_map[49m[43m([49m[43mThreadPoolExecutor[49m[43m,[49m[43m [49m[43mfn[49m[43m,[49m[43m [49m[43m*[49m[43miterables[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mtqdm_kwargs[49m[43m)[49m

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/tqdm/contrib/concurrent.py:51[39m, in [36m_executor_map[39m[34m(PoolExecutor, fn, *iterables, **tqdm_kwargs)[39m
[32m     47[39m [38;5;28;01mwith[39;00m ensure_lock(tqdm_class, lock_name=lock_name) [38;5;28;01mas[39;00m lk:
[32m     48[39m     [38;5;66;03m# share lock in case workers are already using `tqdm`[39;00m
[32m     49[39m     [38;5;28;01mwith[39;00m PoolExecutor(max_workers=max_workers, initializer=tqdm_class.set_lock,
[32m     50[39m                       initargs=(lk,)) [38;5;28;01mas[39;00m ex:
[32m---> [39m[32m51[39m         [38;5;28;01mreturn[39;00m [38;5;28;43mlist[39;49m[43m([49m[43mtqdm_class[49m[43m([49m[43mex[49m[43m.[49m[43mmap[49m[43m([49m[43mfn[49m[43m,[49m[43m [49m[43m*[49m[43miterables[49m[43m,[49m[43m [49m[43mchunksize[49m[43m=[49m[43mchunksize[49m[43m)[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m[43m)[49m

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/tqdm/notebook.py:250[39m, in [36mtqdm_notebook.__iter__[39m[34m(self)[39m
[32m    248[39m [38;5;28;01mtry[39;00m:
[32m    249[39m     it = [38;5;28msuper[39m().[34m__iter__[39m()
[32m--> [39m[32m250[39m [43m    [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mobj[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mit[49m[43m:[49m
[32m    251[39m [43m        [49m[38;5;66;43;03m# return super(tqdm...) will not catch exception[39;49;00m
[32m    252[39m [43m        [49m[38;5;28;43;01myield[39;49;00m[43m [49m[43mobj[49m
[32m    253[39m [38;5;66;03m# NB: except ... [ as ...] breaks IPython async KeyboardInterrupt[39;00m

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/tqdm/std.py:1181[39m, in [36mtqdm.__iter__[39m[34m(self)[39m
[32m   1178[39m time = [38;5;28mself[39m._time
[32m   1180[39m [38;5;28;01mtry[39;00m:
[32m-> [39m[32m1181[39m [43m    [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mobj[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43miterable[49m[43m:[49m
[32m   1182[39m [43m        [49m[38;5;28;43;01myield[39;49;00m[43m [49m[43mobj[49m
[32m   1183[39m [43m        [49m[38;5;66;43;03m# Update and possibly print the progressbar.[39;49;00m
[32m   1184[39m [43m        [49m[38;5;66;43;03m# Note: does not call self.update(1) for speed optimisation.[39;49;00m

[36mFile [39m[32m/usr/lib/python3.12/concurrent/futures/_base.py:619[39m, in [36mExecutor.map.<locals>.result_iterator[39m[34m()[39m
[32m    616[39m [38;5;28;01mwhile[39;00m fs:
[32m    617[39m     [38;5;66;03m# Careful not to keep a reference to the popped future[39;00m
[32m    618[39m     [38;5;28;01mif[39;00m timeout [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m--> [39m[32m619[39m         [38;5;28;01myield[39;00m [43m_result_or_cancel[49m[43m([49m[43mfs[49m[43m.[49m[43mpop[49m[43m([49m[43m)[49m[43m)[49m
[32m    620[39m     [38;5;28;01melse[39;00m:
[32m    621[39m         [38;5;28;01myield[39;00m _result_or_cancel(fs.pop(), end_time - time.monotonic())

[36mFile [39m[32m/usr/lib/python3.12/concurrent/futures/_base.py:317[39m, in [36m_result_or_cancel[39m[34m(***failed resolving arguments***)[39m
[32m    315[39m [38;5;28;01mtry[39;00m:
[32m    316[39m     [38;5;28;01mtry[39;00m:
[32m--> [39m[32m317[39m         [38;5;28;01mreturn[39;00m [43mfut[49m[43m.[49m[43mresult[49m[43m([49m[43mtimeout[49m[43m)[49m
[32m    318[39m     [38;5;28;01mfinally[39;00m:
[32m    319[39m         fut.cancel()

[36mFile [39m[32m/usr/lib/python3.12/concurrent/futures/_base.py:456[39m, in [36mFuture.result[39m[34m(self, timeout)[39m
[32m    454[39m     [38;5;28;01mraise[39;00m CancelledError()
[32m    455[39m [38;5;28;01melif[39;00m [38;5;28mself[39m._state == FINISHED:
[32m--> [39m[32m456[39m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43m__get_result[49m[43m([49m[43m)[49m
[32m    457[39m [38;5;28;01melse[39;00m:
[32m    458[39m     [38;5;28;01mraise[39;00m [38;5;167;01mTimeoutError[39;00m()

[36mFile [39m[32m/usr/lib/python3.12/concurrent/futures/_base.py:401[39m, in [36mFuture.__get_result[39m[34m(self)[39m
[32m    399[39m [38;5;28;01mif[39;00m [38;5;28mself[39m._exception:
[32m    400[39m     [38;5;28;01mtry[39;00m:
[32m--> [39m[32m401[39m         [38;5;28;01mraise[39;00m [38;5;28mself[39m._exception
[32m    402[39m     [38;5;28;01mfinally[39;00m:
[32m    403[39m         [38;5;66;03m# Break a reference cycle with the exception in self._exception[39;00m
[32m    404[39m         [38;5;28mself[39m = [38;5;28;01mNone[39;00m

[36mFile [39m[32m/usr/lib/python3.12/concurrent/futures/thread.py:58[39m, in [36m_WorkItem.run[39m[34m(self)[39m
[32m     55[39m     [38;5;28;01mreturn[39;00m
[32m     57[39m [38;5;28;01mtry[39;00m:
[32m---> [39m[32m58[39m     result = [38;5;28;43mself[39;49m[43m.[49m[43mfn[49m[43m([49m[43m*[49m[38;5;28;43mself[39;49m[43m.[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[38;5;28;43mself[39;49m[43m.[49m[43mkwargs[49m[43m)[49m
[32m     59[39m [38;5;28;01mexcept[39;00m [38;5;167;01mBaseException[39;00m [38;5;28;01mas[39;00m exc:
[32m     60[39m     [38;5;28mself[39m.future.set_exception(exc)

[36mFile [39m[32m~/work/dara/dara/src/dara/structure_db.py:302[39m, in [36mCODDatabase._download_cod[39m[34m(cod_id)[39m
[32m    300[39m [38;5;28;01mtry[39;00m:
[32m    301[39m     url = COD_URL.format(cod_id=cod_id)
[32m--> [39m[32m302[39m     response = [43mrequests[49m[43m.[49m[43mget[49m[43m([49m[43murl[49m[43m,[49m[43m [49m[43mtimeout[49m[43m=[49m[32;43m30[39;49m[43m)[49m
[32m    303[39m     response.raise_for_status()  [38;5;66;03m# Raise an error for bad status codes[39;00m
[32m    304[39m     [38;5;28;01mwith[39;00m NamedTemporaryFile(mode=[33m"[39m[33mw+b[39m[33m"[39m) [38;5;28;01mas[39;00m temp_file:

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/requests/api.py:73[39m, in [36mget[39m[34m(url, params, **kwargs)[39m
[32m     62[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mget[39m(url, params=[38;5;28;01mNone[39;00m, **kwargs):
[32m     63[39m [38;5;250m    [39m[33mr[39m[33;03m"""Sends a GET request.[39;00m
[32m     64[39m 
[32m     65[39m [33;03m    :param url: URL for the new :class:`Request` object.[39;00m
[32m   (...)[39m[32m     70[39m [33;03m    :rtype: requests.Response[39;00m
[32m     71[39m [33;03m    """[39;00m
[32m---> [39m[32m73[39m     [38;5;28;01mreturn[39;00m [43mrequest[49m[43m([49m[33;43m"[39;49m[33;43mget[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43murl[49m[43m,[49m[43m [49m[43mparams[49m[43m=[49m[43mparams[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/requests/api.py:59[39m, in [36mrequest[39m[34m(method, url, **kwargs)[39m
[32m     55[39m [38;5;66;03m# By using the 'with' statement we are sure the session is closed, thus we[39;00m
[32m     56[39m [38;5;66;03m# avoid leaving sockets open which can trigger a ResourceWarning in some[39;00m
[32m     57[39m [38;5;66;03m# cases, and look like a memory leak in others.[39;00m
[32m     58[39m [38;5;28;01mwith[39;00m sessions.Session() [38;5;28;01mas[39;00m session:
[32m---> [39m[32m59[39m     [38;5;28;01mreturn[39;00m [43msession[49m[43m.[49m[43mrequest[49m[43m([49m[43mmethod[49m[43m=[49m[43mmethod[49m[43m,[49m[43m [49m[43murl[49m[43m=[49m[43murl[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/requests/sessions.py:589[39m, in [36mSession.request[39m[34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)[39m
[32m    584[39m send_kwargs = {
[32m    585[39m     [33m"[39m[33mtimeout[39m[33m"[39m: timeout,
[32m    586[39m     [33m"[39m[33mallow_redirects[39m[33m"[39m: allow_redirects,
[32m    587[39m }
[32m    588[39m send_kwargs.update(settings)
[32m--> [39m[32m589[39m resp = [38;5;28;43mself[39;49m[43m.[49m[43msend[49m[43m([49m[43mprep[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43msend_kwargs[49m[43m)[49m
[32m    591[39m [38;5;28;01mreturn[39;00m resp

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/requests/sessions.py:703[39m, in [36mSession.send[39m[34m(self, request, **kwargs)[39m
[32m    700[39m start = preferred_clock()
[32m    702[39m [38;5;66;03m# Send the request[39;00m
[32m--> [39m[32m703[39m r = [43madapter[49m[43m.[49m[43msend[49m[43m([49m[43mrequest[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m
[32m    705[39m [38;5;66;03m# Total elapsed time of the request (approximately)[39;00m
[32m    706[39m elapsed = preferred_clock() - start

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/requests/adapters.py:690[39m, in [36mHTTPAdapter.send[39m[34m(self, request, stream, timeout, verify, cert, proxies)[39m
[32m    688[39m     [38;5;28;01mraise[39;00m SSLError(e, request=request)
[32m    689[39m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(e, ReadTimeoutError):
[32m--> [39m[32m690[39m     [38;5;28;01mraise[39;00m ReadTimeout(e, request=request)
[32m    691[39m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(e, _InvalidHeader):
[32m    692[39m     [38;5;28;01mraise[39;00m InvalidHeader(e, request=request)

[31mReadTimeout[39m: HTTPSConnectionPool(host='www.crystallography.net', port=443): Read timed out. (read timeout=30)

