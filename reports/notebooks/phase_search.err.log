Traceback (most recent call last):
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/work/dara/dara/.venv/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# gather all the phases in the "cifs" directory
all_cifs = list(Path("cifs").glob("*.cif"))

search_results = search_phases(
    pattern_path=pattern_path,
    phases=all_cifs,
    wavelength="Cu",
    instrument_profile="Aeris-fds-Pixcel1d-Medipix3",
)
------------------

----- stdout -----
2025-10-07 18:44:37,538 INFO dara.search.tree Detecting peaks in the pattern.
----- stdout -----
2025-10-07 18:45:03,750 INFO dara.search.tree The wmax is automatically adjusted to 60.04.
----- stdout -----
2025-10-07 18:45:03,752 INFO dara.search.tree The intensity threshold is automatically set to 9.06 % of maximum peak intensity.
----- stdout -----
2025-10-07 18:45:03,752 INFO dara.search.tree Creating the root node.
----- stdout -----
2025-10-07 18:45:03,753 INFO dara.search.tree Refining all the phases in the dataset.
------------------

[31m---------------------------------------------------------------------------[39m
[31mRuntimeError[39m                              Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[5][39m[32m, line 4[39m
[32m      1[39m [38;5;66;03m# gather all the phases in the "cifs" directory[39;00m
[32m      2[39m all_cifs = [38;5;28mlist[39m(Path([33m"[39m[33mcifs[39m[33m"[39m).glob([33m"[39m[33m*.cif[39m[33m"[39m))
[32m----> [39m[32m4[39m search_results = [43msearch_phases[49m[43m([49m
[32m      5[39m [43m    [49m[43mpattern_path[49m[43m=[49m[43mpattern_path[49m[43m,[49m
[32m      6[39m [43m    [49m[43mphases[49m[43m=[49m[43mall_cifs[49m[43m,[49m
[32m      7[39m [43m    [49m[43mwavelength[49m[43m=[49m[33;43m"[39;49m[33;43mCu[39;49m[33;43m"[39;49m[43m,[49m
[32m      8[39m [43m    [49m[43minstrument_profile[49m[43m=[49m[33;43m"[39;49m[33;43mAeris-fds-Pixcel1d-Medipix3[39;49m[33;43m"[39;49m[43m,[49m
[32m      9[39m [43m)[49m

[36mFile [39m[32m~/work/dara/dara/src/dara/search/core.py:89[39m, in [36msearch_phases[39m[34m(pattern_path, phases, pinned_phases, max_phases, wavelength, instrument_profile, phase_params, refinement_params, return_search_tree, record_peak_matcher_scores, rpb_threshold)[39m
[32m     86[39m refinement_params = {**DEFAULT_REFINEMENT_PARAMS, **refinement_params}
[32m     88[39m [38;5;66;03m# build the search tree[39;00m
[32m---> [39m[32m89[39m search_tree = [43mSearchTree[49m[43m([49m
[32m     90[39m [43m    [49m[43mpattern_path[49m[43m=[49m[43mpattern_path[49m[43m,[49m
[32m     91[39m [43m    [49m[43mcif_paths[49m[43m=[49m[43mphases[49m[43m,[49m
[32m     92[39m [43m    [49m[43mpinned_phases[49m[43m=[49m[43mpinned_phases[49m[43m,[49m
[32m     93[39m [43m    [49m[43mrefine_params[49m[43m=[49m[43mrefinement_params[49m[43m,[49m
[32m     94[39m [43m    [49m[43mphase_params[49m[43m=[49m[43mphase_params[49m[43m,[49m
[32m     95[39m [43m    [49m[43mwavelength[49m[43m=[49m[43mwavelength[49m[43m,[49m
[32m     96[39m [43m    [49m[43minstrument_profile[49m[43m=[49m[43minstrument_profile[49m[43m,[49m
[32m     97[39m [43m    [49m[43mmax_phases[49m[43m=[49m[43mmax_phases[49m[43m,[49m
[32m     98[39m [43m    [49m[43mrpb_threshold[49m[43m=[49m[43mrpb_threshold[49m[43m,[49m
[32m     99[39m [43m    [49m[43mrecord_peak_matcher_scores[49m[43m=[49m[43mrecord_peak_matcher_scores[49m[43m,[49m
[32m    100[39m [43m[49m[43m)[49m
[32m    102[39m max_worker = ray.cluster_resources()[[33m"[39m[33mCPU[39m[33m"[39m]
[32m    103[39m pending = [remote_expand_node(search_tree, search_tree.root)]

[36mFile [39m[32m~/work/dara/dara/src/dara/search/tree.py:1019[39m, in [36mSearchTree.__init__[39m[34m(self, pattern_path, cif_paths, pinned_phases, refine_params, phase_params, wavelength, instrument_profile, maximum_grouping_distance, max_phases, rpb_threshold, record_peak_matcher_scores, *args, **kwargs)[39m
[32m   1016[39m root_node = [38;5;28mself[39m._create_root_node()
[32m   1017[39m [38;5;28mself[39m.add_node(root_node)
[32m-> [39m[32m1019[39m all_phases_result = [38;5;28;43mself[39;49m[43m.[49m[43m_get_all_cleaned_phases_result[49m[43m([49m[43m)[49m
[32m   1020[39m [38;5;28mself[39m.all_phases_result = all_phases_result

[36mFile [39m[32m~/work/dara/dara/src/dara/search/tree.py:1086[39m, in [36mSearchTree._get_all_cleaned_phases_result[39m[34m(self)[39m
[32m   1082[39m pinned_phases_set = [38;5;28mset[39m([38;5;28mself[39m.pinned_phases)
[32m   1083[39m cif_paths = [
[32m   1084[39m     cif_path [38;5;28;01mfor[39;00m cif_path [38;5;129;01min[39;00m [38;5;28mself[39m.cif_paths [38;5;28;01mif[39;00m cif_path [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m pinned_phases_set
[32m   1085[39m ]
[32m-> [39m[32m1086[39m all_phases_result = [38;5;28;43mself[39;49m[43m.[49m[43mrefine_phases[49m[43m([49m
[32m   1087[39m [43m    [49m[43mcif_paths[49m[43m,[49m
[32m   1088[39m [43m    [49m[43mpinned_phases[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mpinned_phases[49m[43m,[49m
[32m   1089[39m [43m[49m[43m)[49m
[32m   1091[39m [38;5;66;03m# adjust the initial value of eps1 based on the weighted average of all the phases[39;00m
[32m   1092[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m([38;5;28mself[39m.refinement_params.get([33m"[39m[33meps1[39m[33m"[39m, [32m0[39m), Number):

[36mFile [39m[32m~/work/dara/dara/src/dara/search/tree.py:833[39m, in [36mBaseSearchTree.refine_phases[39m[34m(self, phases, pinned_phases)[39m
[32m    827[39m [38;5;28;01mif[39;00m pinned_phases [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m    828[39m     pinned_phases = []
[32m    830[39m [38;5;28;01mreturn[39;00m [38;5;28mdict[39m(
[32m    831[39m     zip_longest(
[32m    832[39m         phases,
[32m--> [39m[32m833[39m         [38;5;28;43mself[39;49m[43m.[49m[43m_batch_refine[49m[43m([49m
[32m    834[39m [43m            [49m[43mall_references[49m[43m=[49m[43m[[49m[43m[[49m[43m*[49m[43mpinned_phases[49m[43m,[49m[43m [49m[43mphase[49m[43m][49m[43m [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mphase[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mphases[49m[43m][49m[43m,[49m
[32m    835[39m [43m        [49m[43m)[49m,
[32m    836[39m         fillvalue=[38;5;28;01mNone[39;00m,
[32m    837[39m     )
[32m    838[39m )

[36mFile [39m[32m~/work/dara/dara/src/dara/search/tree.py:844[39m, in [36mBaseSearchTree._batch_refine[39m[34m(self, all_references)[39m
[32m    840[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m_batch_refine[39m(
[32m    841[39m     [38;5;28mself[39m,
[32m    842[39m     all_references: [38;5;28mlist[39m[[38;5;28mlist[39m[RefinementPhase]],
[32m    843[39m ) -> [38;5;28mlist[39m[RefinementResult]:
[32m--> [39m[32m844[39m     [38;5;28;01mreturn[39;00m [43mbatch_refinement[49m[43m([49m
[32m    845[39m [43m        [49m[38;5;28;43mself[39;49m[43m.[49m[43mpattern_path[49m[43m,[49m
[32m    846[39m [43m        [49m[43mall_references[49m[43m,[49m
[32m    847[39m [43m        [49m[43mwavelength[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mwavelength[49m[43m,[49m
[32m    848[39m [43m        [49m[43minstrument_profile[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43minstrument_profile[49m[43m,[49m
[32m    849[39m [43m        [49m[43mphase_params[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mphase_params[49m[43m,[49m
[32m    850[39m [43m        [49m[43mrefinement_params[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mrefinement_params[49m[43m,[49m
[32m    851[39m [43m    [49m[43m)[49m

[36mFile [39m[32m~/work/dara/dara/src/dara/search/tree.py:128[39m, in [36mbatch_refinement[39m[34m(pattern_path, cif_paths, wavelength, instrument_profile, phase_params, refinement_params)[39m
[32m    119[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mbatch_refinement[39m(
[32m    120[39m     pattern_path: Path,
[32m    121[39m     cif_paths: [38;5;28mlist[39m[[38;5;28mlist[39m[RefinementPhase]],
[32m   (...)[39m[32m    125[39m     refinement_params: [38;5;28mdict[39m[[38;5;28mstr[39m, [38;5;28mfloat[39m] | [38;5;28;01mNone[39;00m = [38;5;28;01mNone[39;00m,
[32m    126[39m ) -> [38;5;28mlist[39m[RefinementResult]:
[32m    127[39m     handles = [
[32m--> [39m[32m128[39m         [43mremote_do_refinement_no_saving[49m[43m.[49m[43mremote[49m[43m([49m
[32m    129[39m [43m            [49m[43mpattern_path[49m[43m,[49m
[32m    130[39m [43m            [49m[43mcif_paths[49m[43m,[49m
[32m    131[39m [43m            [49m[43mwavelength[49m[43m=[49m[43mwavelength[49m[43m,[49m
[32m    132[39m [43m            [49m[43minstrument_profile[49m[43m=[49m[43minstrument_profile[49m[43m,[49m
[32m    133[39m [43m            [49m[43mphase_params[49m[43m=[49m[43mphase_params[49m[43m,[49m
[32m    134[39m [43m            [49m[43mrefinement_params[49m[43m=[49m[43mrefinement_params[49m[43m,[49m
[32m    135[39m [43m        [49m[43m)[49m
[32m    136[39m         [38;5;28;01mfor[39;00m cif_paths [38;5;129;01min[39;00m cif_paths
[32m    137[39m     ]
[32m    138[39m     [38;5;28;01mreturn[39;00m ray.get(handles)

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/ray/remote_function.py:163[39m, in [36mRemoteFunction.__init__.<locals>._remote_proxy[39m[34m(*args, **kwargs)[39m
[32m    161[39m [38;5;129m@wraps[39m(function)
[32m    162[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m_remote_proxy[39m(*args, **kwargs):
[32m--> [39m[32m163[39m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43m_remote[49m[43m([49m
[32m    164[39m [43m        [49m[43mserialized_runtime_env_info[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43m_serialized_base_runtime_env_info[49m[43m,[49m
[32m    165[39m [43m        [49m[43margs[49m[43m=[49m[43margs[49m[43m,[49m
[32m    166[39m [43m        [49m[43mkwargs[49m[43m=[49m[43mkwargs[49m[43m,[49m
[32m    167[39m [43m        [49m[43m*[49m[43m*[49m[38;5;28;43mself[39;49m[43m.[49m[43m_default_options[49m[43m,[49m
[32m    168[39m [43m    [49m[43m)[49m

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/ray/_private/auto_init_hook.py:21[39m, in [36mwrap_auto_init.<locals>.auto_init_wrapper[39m[34m(*args, **kwargs)[39m
[32m     19[39m [38;5;129m@wraps[39m(fn)
[32m     20[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mauto_init_wrapper[39m(*args, **kwargs):
[32m---> [39m[32m21[39m     [43mauto_init_ray[49m[43m([49m[43m)[49m
[32m     22[39m     [38;5;28;01mreturn[39;00m fn(*args, **kwargs)

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/ray/_private/auto_init_hook.py:15[39m, in [36mauto_init_ray[39m[34m()[39m
[32m     13[39m [38;5;28;01mwith[39;00m auto_init_lock:
[32m     14[39m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m ray.is_initialized():
[32m---> [39m[32m15[39m         [43mray[49m[43m.[49m[43minit[49m[43m([49m[43m)[49m

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/ray/_private/client_mode_hook.py:104[39m, in [36mclient_mode_hook.<locals>.wrapper[39m[34m(*args, **kwargs)[39m
[32m    102[39m     [38;5;28;01mif[39;00m func.[34m__name__[39m != [33m"[39m[33minit[39m[33m"[39m [38;5;129;01mor[39;00m is_client_mode_enabled_by_default:
[32m    103[39m         [38;5;28;01mreturn[39;00m [38;5;28mgetattr[39m(ray, func.[34m__name__[39m)(*args, **kwargs)
[32m--> [39m[32m104[39m [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/ray/_private/worker.py:1732[39m, in [36minit[39m[34m(address, num_cpus, num_gpus, resources, labels, object_store_memory, local_mode, ignore_reinit_error, include_dashboard, dashboard_host, dashboard_port, job_config, configure_logging, logging_level, logging_format, logging_config, log_to_driver, namespace, runtime_env, enable_resource_isolation, system_reserved_cpu, system_reserved_memory, **kwargs)[39m
[32m   1727[39m         job_config.set_metadata(key, value)
[32m   1729[39m [38;5;66;03m# RAY_JOB_CONFIG_JSON_ENV_VAR is only set at ray job manager level and has[39;00m
[32m   1730[39m [38;5;66;03m# higher priority in case user also provided runtime_env for ray.init()[39;00m
[32m   1731[39m [38;5;28;01melse[39;00m:
[32m-> [39m[32m1732[39m     runtime_env = [43m_maybe_modify_runtime_env[49m[43m([49m[43mruntime_env[49m[43m,[49m[43m [49m[43m_skip_env_hook[49m[43m)[49m
[32m   1734[39m     [38;5;28;01mif[39;00m runtime_env:
[32m   1735[39m         [38;5;66;03m# Set runtime_env in job_config if passed in as part of ray.init()[39;00m
[32m   1736[39m         job_config.set_runtime_env(runtime_env)

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/ray/_private/worker.py:1331[39m, in [36m_maybe_modify_runtime_env[39m[34m(runtime_env, _skip_env_hook)[39m
[32m   1327[39m     cmdline = _get_uv_run_cmdline()
[32m   1328[39m     [38;5;28;01mif[39;00m cmdline:
[32m   1329[39m         [38;5;66;03m# This means the current driver is running in `uv run`, in which case we want[39;00m
[32m   1330[39m         [38;5;66;03m# to propagate the uv environment to the workers.[39;00m
[32m-> [39m[32m1331[39m         [38;5;28;01mreturn[39;00m [43mhook[49m[43m([49m[43mruntime_env[49m[43m)[49m
[32m   1333[39m [38;5;28;01mif[39;00m ray_constants.RAY_RUNTIME_ENV_HOOK [38;5;129;01min[39;00m os.environ [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m _skip_env_hook:
[32m   1334[39m     [38;5;28;01mreturn[39;00m load_class(os.environ[ray_constants.RAY_RUNTIME_ENV_HOOK])(runtime_env)

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/ray/_private/runtime_env/uv_runtime_env_hook.py:343[39m, in [36mhook[39m[34m(runtime_env)[39m
[32m    341[39m [38;5;28;01mif[39;00m [33m"[39m[33mworking_dir[39m[33m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m runtime_env:
[32m    342[39m     runtime_env[[33m"[39m[33mworking_dir[39m[33m"[39m] = os.getcwd()
[32m--> [39m[32m343[39m     [43m_check_working_dir_files[49m[43m([49m[43moptions[49m[43m,[49m[43m [49m[43mruntime_env[49m[43m)[49m
[32m    345[39m [38;5;28;01mreturn[39;00m runtime_env

[36mFile [39m[32m~/work/dara/dara/.venv/lib/python3.12/site-packages/ray/_private/runtime_env/uv_runtime_env_hook.py:262[39m, in [36m_check_working_dir_files[39m[34m(uv_run_args, runtime_env)[39m
[32m    259[39m         current_path = current_path.parent
[32m    261[39m [38;5;28;01mif[39;00m pyproject [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m pyproject.resolve().is_relative_to(working_dir):
[32m--> [39m[32m262[39m     [38;5;28;01mraise[39;00m [38;5;167;01mRuntimeError[39;00m(
[32m    263[39m         [33mf[39m[33m"[39m[33mYour [39m[38;5;132;01m{[39;00mpyproject.resolve()[38;5;132;01m}[39;00m[33m is not in the working_dir [39m[38;5;132;01m{[39;00mruntime_env[[33m'[39m[33mworking_dir[39m[33m'[39m][38;5;132;01m}[39;00m[33m, [39m[33m"[39m
[32m    264[39m         [33m"[39m[33mso the workers will not have access to the file. Make sure [39m[33m"[39m
[32m    265[39m         [33m"[39m[33mthe pyproject.toml file is in the working directory. [39m[33m"[39m
[32m    266[39m         [33m"[39m[33mYou can do so by specifying --directory in [39m[33m'[39m[33muv run[39m[33m'[39m[33m, by changing the current [39m[33m"[39m
[32m    267[39m         [33m"[39m[33mworking directory before running [39m[33m'[39m[33muv run[39m[33m'[39m[33m, or by using the [39m[33m'[39m[33mworking_dir[39m[33m'[39m[33m [39m[33m"[39m
[32m    268[39m         [33m"[39m[33mparameter of the runtime_environment.[39m[33m"[39m
[32m    269[39m     )

[31mRuntimeError[39m: Your /home/runner/work/dara/dara/pyproject.toml is not in the working_dir /home/runner/work/dara/dara/notebooks, so the workers will not have access to the file. Make sure the pyproject.toml file is in the working directory. You can do so by specifying --directory in 'uv run', by changing the current working directory before running 'uv run', or by using the 'working_dir' parameter of the runtime_environment.

