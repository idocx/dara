Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# gather all the phases in the "cifs" directory
all_cifs = list(Path("cifs").glob("*.cif"))

search_results = search_phases(
    pattern_path=pattern_path,
    phases=all_cifs,
    wavelength="Cu",
    instrument_profile="Aeris-fds-Pixcel1d-Medipix3",
)
------------------

----- stdout -----
2025-09-06 23:16:40,734 INFO dara.search.tree Detecting peaks in the pattern.
----- stdout -----
2025-09-06 23:17:24,756 INFO dara.search.tree The wmax is automatically adjusted to 60.04.
------------------

[31m---------------------------------------------------------------------------[39m
[31mKeyError[39m                                  Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[5][39m[32m, line 4[39m
[32m      1[39m [38;5;66;03m# gather all the phases in the "cifs" directory[39;00m
[32m      2[39m all_cifs = [38;5;28mlist[39m(Path([33m"[39m[33mcifs[39m[33m"[39m).glob([33m"[39m[33m*.cif[39m[33m"[39m))
[32m----> [39m[32m4[39m search_results = [43msearch_phases[49m[43m([49m
[32m      5[39m [43m    [49m[43mpattern_path[49m[43m=[49m[43mpattern_path[49m[43m,[49m
[32m      6[39m [43m    [49m[43mphases[49m[43m=[49m[43mall_cifs[49m[43m,[49m
[32m      7[39m [43m    [49m[43mwavelength[49m[43m=[49m[33;43m"[39;49m[33;43mCu[39;49m[33;43m"[39;49m[43m,[49m
[32m      8[39m [43m    [49m[43minstrument_profile[49m[43m=[49m[33;43m"[39;49m[33;43mAeris-fds-Pixcel1d-Medipix3[39;49m[33;43m"[39;49m[43m,[49m
[32m      9[39m [43m)[49m

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/dara/search/core.py:89[39m, in [36msearch_phases[39m[34m(pattern_path, phases, pinned_phases, max_phases, wavelength, instrument_profile, phase_params, refinement_params, return_search_tree, record_peak_matcher_scores, rpb_threshold)[39m
[32m     86[39m refinement_params = {**DEFAULT_REFINEMENT_PARAMS, **refinement_params}
[32m     88[39m [38;5;66;03m# build the search tree[39;00m
[32m---> [39m[32m89[39m search_tree = [43mSearchTree[49m[43m([49m
[32m     90[39m [43m    [49m[43mpattern_path[49m[43m=[49m[43mpattern_path[49m[43m,[49m
[32m     91[39m [43m    [49m[43mcif_paths[49m[43m=[49m[43mphases[49m[43m,[49m
[32m     92[39m [43m    [49m[43mpinned_phases[49m[43m=[49m[43mpinned_phases[49m[43m,[49m
[32m     93[39m [43m    [49m[43mrefine_params[49m[43m=[49m[43mrefinement_params[49m[43m,[49m
[32m     94[39m [43m    [49m[43mphase_params[49m[43m=[49m[43mphase_params[49m[43m,[49m
[32m     95[39m [43m    [49m[43mwavelength[49m[43m=[49m[43mwavelength[49m[43m,[49m
[32m     96[39m [43m    [49m[43minstrument_profile[49m[43m=[49m[43minstrument_profile[49m[43m,[49m
[32m     97[39m [43m    [49m[43mmax_phases[49m[43m=[49m[43mmax_phases[49m[43m,[49m
[32m     98[39m [43m    [49m[43mrpb_threshold[49m[43m=[49m[43mrpb_threshold[49m[43m,[49m
[32m     99[39m [43m    [49m[43mrecord_peak_matcher_scores[49m[43m=[49m[43mrecord_peak_matcher_scores[49m[43m,[49m
[32m    100[39m [43m[49m[43m)[49m
[32m    102[39m max_worker = ray.cluster_resources()[[33m"[39m[33mCPU[39m[33m"[39m]
[32m    103[39m pending = [remote_expand_node(search_tree, search_tree.root)]

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/dara/search/tree.py:1005[39m, in [36mSearchTree.__init__[39m[34m(self, pattern_path, cif_paths, pinned_phases, refine_params, phase_params, wavelength, instrument_profile, maximum_grouping_distance, max_phases, rpb_threshold, record_peak_matcher_scores, *args, **kwargs)[39m
[32m    985[39m [38;5;28msuper[39m().[34m__init__[39m(
[32m    986[39m     pattern_path,
[32m    987[39m     [38;5;28;01mNone[39;00m,
[32m   (...)[39m[32m   1000[39m     **kwargs,
[32m   1001[39m )
[32m   1003[39m [38;5;66;03m# side effect: sets self.peak_obs and self.refinement_params["wmax"] in the function[39;00m
[32m   1004[39m [38;5;66;03m# also update the initial guess of b1 in self.refinement_params[39;00m
[32m-> [39m[32m1005[39m [38;5;28;43mself[39;49m[43m.[49m[43m_detect_peak_in_pattern[49m[43m([49m[43m)[49m
[32m   1007[39m [38;5;28mself[39m.intensity_threshold = [38;5;28mmin[39m(
[32m   1008[39m     find_optimal_intensity_threshold([38;5;28mself[39m.peak_obs[:, [32m1[39m]),
[32m   1009[39m     [32m0.1[39m * np.max([38;5;28mself[39m.peak_obs[:, [32m1[39m]),
[32m   1010[39m )
[32m   1011[39m logger.info(
[32m   1012[39m     [33mf[39m[33m"[39m[33mThe intensity threshold is automatically set [39m[33m"[39m
[32m   1013[39m     [33mf[39m[33m"[39m[33mto [39m[38;5;132;01m{[39;00m[38;5;28mself[39m.intensity_threshold[38;5;250m [39m/[38;5;250m [39m[38;5;28mself[39m.peak_obs[:,[38;5;250m [39m[32m1[39m].max()[38;5;250m [39m*[38;5;250m [39m[32m100[39m[38;5;132;01m:[39;00m[33m.2f[39m[38;5;132;01m}[39;00m[33m % of maximum peak intensity.[39m[33m"[39m
[32m   1014[39m )

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/dara/search/tree.py:1050[39m, in [36mSearchTree._detect_peak_in_pattern[39m[34m(self)[39m
[32m   1048[39m [38;5;66;03m# estimate the mean b1 value from the pattern[39;00m
[32m   1049[39m estimated_b1 = np.mean(peak_list[[33m"[39m[33mb1[39m[33m"[39m].dropna().values)
[32m-> [39m[32m1050[39m initial, lower, upper = parse_refinement_param([38;5;28;43mself[39;49m[43m.[49m[43mrefinement_params[49m[43m[[49m[33;43m"[39;49m[33;43mb1[39;49m[33;43m"[39;49m[43m][49m)
[32m   1051[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(initial, Number) [38;5;129;01mand[39;00m estimated_b1 [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m   1052[39m     [38;5;28;01mif[39;00m lower [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m estimated_b1 < lower:

[31mKeyError[39m: 'b1'

